######################
-Examples-
######################
Text:
The Renishaw AM400 system includes a chiller and a vacuum pump. These components are necessary for maintaining system temperature and removing debris. Operators must wear PPE during powder handling, and follow the procedures in the training manual.

Output:
("entity"|||RENISHAW AM400|||DEVICE|||A metal additive manufacturing system developed by Renishaw.)
<REC>
("entity"|||CHILLER|||COMPONENT|||A cooling unit used to regulate system temperature.)
<REC>
("entity"|||VACUUM PUMP|||COMPONENT|||A component that removes debris and maintains chamber cleanliness.)
<REC>
("entity"|||PPE|||SAFETYSTEP|||Protective equipment required during powder handling to ensure operator safety.)
<REC>
("entity"|||TRAINING MANUAL|||DOCUMENT|||A document that outlines operational procedures and safety protocols.)
<REC>
("relationship"|||CHILLER|||RENISHAW AM400|||part of)
<REC>
("relationship"|||VACUUM PUMP|||RENISHAW AM400|||part of)
<REC>
("relationship"|||PPE|||POWDER HANDLING|||required for)
<REC>
("relationship"|||TRAINING MANUAL|||OPERATOR|||used by)
<REC>

Text:
The system relies on external sensors to adjust feed rate. Data logs are saved automatically.

Output:
("entity"|||SENSORS|||COMPONENT|||External input devices used to monitor conditions.)
<REC>
("entity"|||FEED RATE|||PROCESS|||Rate at which materials are fed into system.)
<REC>
("relationship"|||SENSORS|||FEED RATE|||controls)
<REC>
("entity"|||DATA LOGS|||DOCUMENT|||Files that store operation history.)
<REC>
("relationship"|||DATA LOGS|||SYSTEM|||generated by)
<REC>

######################
-Goal-
######################

You are given a technical document and a restricted set of allowed entity types. Your task is to extract:

1. All **valid, grounded entities** (that match the allowed types), and  
2. A **dense, diverse set of meaningful relationships** among those entities.

You should extract **as many distinct entities as possible**—prefer short noun phrases, technical terms, abbreviations, or proper nouns that appear in the source text.

**Important:**  
- Do **not invent or hallucinate** entities.  
- Every entity must **exactly match** or be **directly derived** from phrases in the source input.

Try to produce at least **12–15 entities per passage**, if the input allows.

The final output should include **a number of relationships approximately 3× the number of entities**, where all relationships are plausible and grounded.

######################
-Steps-
######################

1. Identify all **entities** in the text.  
   For each, extract:
   - Name: must appear in the input (verbatim or slightly normalized)
   - Type: must be one of the following:  
     [Component, Material, Organization, Procedure, Safety, Software, Tool, Warning, Chemical, AdditionalInfo]
   - Description: specific and informative (1–2 sentences)

   ✅ Prioritize:
   - Domain-specific nouns or noun phrases
   - Names of materials, parts, components, or procedures
   - Abbreviations, terms, or references that appear in the text

   ❌ Do NOT invent entities that don’t appear in the input

   Format:
   ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)

2. Identify all **meaningful relationships** between extracted entities:
   - Must be explicit or reasonably inferred
   - Types: compositional, procedural, safety-related, functional, regulatory, etc.

   Try to connect each entity to **2–4 others**. Avoid isolated nodes when possible.

   Format:
   ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>)

3. Output all entities and relationships, joined with **{record_delimiter}**, and end with **{completion_delimiter}**

######################
-Real Data-
######################
Entity_types: Component, Material, Organization, Procedure, Safety, Software, Tool, Warning, Chemical, AdditionalInfo  
Text: {input_text}

######################
Output:
